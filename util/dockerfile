ARG riscv=/tools/riscv
ARG verilator_version=4.210
ARG verible_version=v0.0-3858-g660d1664
ARG clang_version=20.1.1
ARG gtkwave_version=3.3.111

# First stage: build the environment
FROM ubuntu:24.04 AS builder

# Import environment variables from global scope
ARG riscv
ARG verilator_version
ARG verible_version
ARG clang_version
ARG gtkwave_version
ENV RISCV=${riscv}
ENV VERILATOR_VERSION=${verilator_version}
ENV VERIBLE_VERSION=${verible_version}
ENV CLANG_VERSION=${clang_version}
ENV GTKWAVE_VERSION=${gtkwave_version}

# Install dependancies
RUN apt update && DEBIAN_FRONTEND=noninteractive apt install -y lcov \
    libelf1 libelf-dev libftdi1-2 libftdi1-dev libssl-dev libglib2.0-dev \
    libudev-dev libusb-1.0-0 lsb-release texinfo autoconf automake autotools-dev \
    libmpc-dev libmpfr-dev libgmp-dev gperf libtool patchutils bc zlib1g-dev \
    cmake flex bison libexpat-dev gawk tree xterm python3-venv python3-dev ninja-build \
    git wget python3 build-essential make coreutils libfindbin-libs-perl g++ curl \
    # GTKWave dependencies - Changed to GTK+2.0
    libgtk2.0-dev libcairo2-dev libpango1.0-dev libtcl8.6 libtk8.6 tcl-dev tk-dev \
    pkg-config \
    # Dependencies for llvm/clang
    lsb-release software-properties-common gnupg \
    && rm -rf /var/lib/apt/lists/*

# Install GCC-RISC-V toolchain
RUN mkdir -p /corev
RUN wget -qO- https://buildbot.embecosm.com/job/corev-gcc-ubuntu2204/47/artifact/corev-openhw-gcc-ubuntu2204-20240530.tar.gz | tar -xz -C /corev
RUN mkdir -p $RISCV
RUN mv /corev/corev-openhw-gcc-ubuntu2204-20240530/* $RISCV/
RUN rm -rf /corev/corev-openhw-gcc-ubuntu2204-20240530

# Install pre-compiled clang/llvm instead of building from source
RUN wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key | apt-key add -
RUN apt-add-repository "deb http://apt.llvm.org/jammy/ llvm-toolchain-jammy main"
RUN apt update && apt install -y clang-14 llvm-14 llvm-14-dev llvm-14-tools

# Create symbolic links to match expected paths
RUN mkdir -p $RISCV/bin
RUN for tool in clang clang++ llvm-config llvm-ar llvm-ranlib llvm-objdump; do \
        ln -sf /usr/bin/$tool-14 $RISCV/bin/$tool; \
    done

# Install Verilator
RUN git clone https://github.com/verilator/verilator.git && cd verilator && git checkout v$VERILATOR_VERSION
RUN apt update && apt install -y autoconf automake autotools-dev libmpc-dev libmpfr-dev libgmp-dev gperf help2man
RUN cd /verilator && autoconf && ./configure --prefix=/tools/verilator/$VERILATOR_VERSION
RUN cd /verilator && sed -i '1i#include <memory>' /verilator/src/V3Const.cpp && make -j$(nproc) && make install
RUN rm -rf /verilator

# Install Verible
RUN wget https://github.com/chipsalliance/verible/releases/download/${VERIBLE_VERSION}/verible-${VERIBLE_VERSION}-linux-static-x86_64.tar.gz
RUN mkdir -p /tools/verible && tar -xf verible-${VERIBLE_VERSION}-linux-static-x86_64.tar.gz -C /tools/verible/
RUN rm verible-${VERIBLE_VERSION}-linux-static-x86_64.tar.gz

# Install GTKWave
RUN wget https://sourceforge.net/projects/gtkwave/files/gtkwave-${GTKWAVE_VERSION}/gtkwave-${GTKWAVE_VERSION}.tar.gz
RUN tar -xf gtkwave-${GTKWAVE_VERSION}.tar.gz
# Explicitly set PKG_CONFIG_PATH to help configure find GTK+2.0
RUN cd gtkwave-${GTKWAVE_VERSION} && \
    export PKG_CONFIG_PATH=/usr/lib/x86_64-linux-gnu/pkgconfig && \
    ./configure --prefix=/tools/gtkwave/${GTKWAVE_VERSION} --with-tcl=/usr/lib/tcl8.6 --with-tk=/usr/lib/tk8.6 && \
    make -j$(nproc) && \
    make install
RUN rm -rf gtkwave-${GTKWAVE_VERSION} gtkwave-${GTKWAVE_VERSION}.tar.gz

# Install conda
RUN wget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh
RUN bash Miniconda3-latest-Linux-x86_64.sh -b -p /opt/conda
RUN /opt/conda/bin/conda init bash
RUN rm Miniconda3-latest-Linux-x86_64.sh

# Install conda environment
COPY environment.yml .
RUN /opt/conda/bin/conda env create -f environment.yml
RUN rm environment.yml

# install picocom
RUN apt update && apt install -y picocom

RUN apt update && DEBIAN_FRONTEND=noninteractive apt install -y build-essential

# Pull busybox image
FROM busybox:1.35.0-uclibc AS busybox

# Openroad
FROM hdlc/openroad:gui AS OpenROAD
 
# Use Ubuntu as base for final image instead of distroless
FROM ubuntu:24.04

ARG riscv
ARG verilator_version
ARG verible_version
ARG clang_version
ARG gtkwave_version
ENV RISCV=${riscv}
ENV VERILATOR_VERSION=${verilator_version}
ENV VERIBLE_VERSION=${verible_version}
ENV CLANG_VERSION=${clang_version}
ENV GTKWAVE_VERSION=${gtkwave_version}

# Create necessary directories
RUN mkdir -p /usr/bin /tools/riscv /tools/verilator /tools/verible /tools/gtkwave /opt/conda

# Copy RISC-V toolchain from builder
COPY --from=builder /tools/riscv /tools/riscv

# Copy Verilator from builder
COPY --from=builder /tools/verilator /tools/verilator

# Copy Verible from builder
COPY --from=builder /tools/verible /tools/verible

# Copy GTKWave from builder
COPY --from=builder /tools/gtkwave /tools/gtkwave

# Copy conda from builder
COPY --from=builder /opt/conda /opt/conda

# Copy binaries from builder
COPY --from=builder /usr/bin/perl /usr/bin/perl
COPY --from=builder /usr/bin/env /usr/bin/env
COPY --from=builder /usr/bin/make /usr/bin/make
COPY --from=builder /usr/bin/cpan /usr/bin/cpan
COPY --from=builder /usr/bin/cmake /usr/bin/cmake
COPY --from=builder /usr/bin/g++ /usr/bin/g++
COPY --from=builder /usr/bin/as /usr/bin/as
COPY --from=builder /usr/bin/ar /usr/bin/ar
COPY --from=builder /usr/bin/ld /usr/bin/ld
COPY --from=builder /usr/bin/git /usr/bin/git
COPY --from=builder /usr/bin/curl /usr/bin/curl
COPY --from=builder /usr/bin/tail /usr/bin/tail
COPY --from=builder /usr/bin/pkill /usr/bin/pkill
COPY --from=builder /usr/bin/xargs /usr/bin/xargs
COPY --from=builder /usr/bin/chmod /usr/bin/chmod
COPY --from=builder /usr/bin/grep /usr/bin/grep
COPY --from=builder /usr/bin/awk /usr/bin/awk
COPY --from=builder /usr/bin/tac /usr/bin/tac
COPY --from=builder /usr/bin/cut /usr/bin/cut
COPY --from=builder /usr/bin/bc /usr/bin/bc
COPY --from=builder /usr/bin/pkg-config /usr/bin/pkg-config
COPY --from=builder /usr/bin/cc /usr/bin/cc
COPY --from=builder /usr/bin/picocom /usr/bin/picocom
COPY --from=builder /usr/bin/realpath /usr/bin/realpath
COPY --from=builder /usr/bin/touch /usr/bin/touch
COPY --from=builder /usr/bin/cp /usr/bin/cp
COPY --from=builder /usr/bin/pwd /usr/bin/pwd
COPY --from=builder /usr/bin/mv /usr/bin/mv
COPY --from=builder /usr/bin/sort /usr/bin/sort
COPY --from=builder /usr/bin/head /usr/bin/head
COPY --from=builder /usr/bin/ln /usr/bin/ln
COPY --from=builder /usr/bin/uname /usr/bin/uname
COPY --from=builder /usr/bin/gcc /usr/bin/gcc
COPY --from=builder /usr/bin/readelf /usr/bin/readelf

# Copy clang/llvm binaries from builder
COPY --from=builder /usr/bin/clang-14 /usr/bin/clang-14
COPY --from=builder /usr/bin/clang++-14 /usr/bin/clang++-14
COPY --from=builder /usr/bin/llvm-config-14 /usr/bin/llvm-config-14
COPY --from=builder /usr/bin/llvm-ar-14 /usr/bin/llvm-ar-14
COPY --from=builder /usr/bin/llvm-ranlib-14 /usr/bin/llvm-ranlib-14
COPY --from=builder /usr/bin/llvm-objdump-14 /usr/bin/llvm-objdump-14

# Create symbolic links for clang/llvm tools
RUN for tool in clang clang++ llvm-config llvm-ar llvm-ranlib llvm-objdump; do \
        ln -sf /usr/bin/$tool-14 /usr/bin/$tool; \
    done

# Copy libraries from builder
COPY --from=builder /usr/include/ /usr/include/
COPY --from=builder /usr/share/gcc /usr/share/gcc
COPY --from=builder /usr/share/perl /usr/share/perl
COPY --from=builder /usr/share/cmake /usr/share/cmake
COPY --from=builder /usr/share/cmake-3.28 /usr/share/cmake-3.28
COPY --from=builder /usr/share/perl5 /usr/share/perl5
COPY --from=builder /usr/share/perl/5.38 /usr/share/perl/5.38
COPY --from=builder /usr/share/git-core/templates /usr/share/git-core/templates
COPY --from=builder /lib /lib
COPY --from=builder /usr/lib/git-core /usr/lib/git-core
COPY --from=builder /usr/lib/gcc /usr/lib/gcc
COPY --from=builder /usr/lib/gcc/x86_64-linux-gnu /usr/lib/gcc/x86_64-linux-gnu
COPY --from=builder /usr/lib/x86_64-linux-gnu /usr/lib/x86_64-linux-gnu
COPY --from=builder /usr/lib/x86_64-linux-gnu/perl/5.38 /usr/lib/x86_64-linux-gnu/perl/5.38
COPY --from=builder /usr/lib/x86_64-linux-gnu/perl5/5.38 /usr/lib/x86_64-linux-gnu/perl5/5.38
COPY --from=builder /usr/lib/x86_64-linux-gnu/perl-base /usr/lib/x86_64-linux-gnu/perl-base
COPY --from=builder /usr/lib /usr/lib
COPY --from=builder /usr/libexec /usr/libexec

# Copy LLVM/Clang libraries
COPY --from=builder /usr/lib/llvm-14 /usr/lib/llvm-14

# Copy perl binaries from builder
COPY --from=builder /etc/perl /etc/perl

# Copy OpenROAD and its dependencies from OpenROAD stage
COPY --from=OpenROAD /usr/local/bin/openroad /usr/local/bin/openroad
COPY --from=OpenROAD /usr/lib/x86_64-linux-gnu/libtcl8.6.so /usr/lib/x86_64-linux-gnu/
COPY --from=OpenROAD /opt/or-tools/lib/libortools.so.9 /opt/or-tools/lib/
COPY --from=OpenROAD /usr/lib/x86_64-linux-gnu/libomp.so.5 /usr/lib/x86_64-linux-gnu/
COPY --from=OpenROAD /usr/lib/x86_64-linux-gnu/libspdlog.so.1 /usr/lib/x86_64-linux-gnu/
COPY --from=OpenROAD /usr/lib/x86_64-linux-gnu/libfmt.so.7 /usr/lib/x86_64-linux-gnu/
COPY --from=OpenROAD /usr/lib/x86_64-linux-gnu/libpython3.9.so.1.0 /usr/lib/x86_64-linux-gnu/
COPY --from=OpenROAD /usr/lib/x86_64-linux-gnu/libQt5Widgets.so.5 /usr/lib/x86_64-linux-gnu/
COPY --from=OpenROAD /usr/lib/x86_64-linux-gnu/libQt5Gui.so.5 /usr/lib/x86_64-linux-gnu/
COPY --from=OpenROAD /usr/lib/x86_64-linux-gnu/libQt5Core.so.5 /usr/lib/x86_64-linux-gnu/
COPY --from=OpenROAD /usr/lib/x86_64-linux-gnu/libGL.so.1 /usr/lib/x86_64-linux-gnu/
COPY --from=OpenROAD /usr/lib/x86_64-linux-gnu/libpng16.so.16 /usr/lib/x86_64-linux-gnu/
COPY --from=OpenROAD /usr/lib/x86_64-linux-gnu/libharfbuzz.so.0 /usr/lib/x86_64-linux-gnu/
COPY --from=OpenROAD /usr/lib/x86_64-linux-gnu/libmd4c.so.0 /usr/lib/x86_64-linux-gnu/
COPY --from=OpenROAD /usr/lib/x86_64-linux-gnu/libdouble-conversion.so.3 /usr/lib/x86_64-linux-gnu/
COPY --from=OpenROAD /usr/lib/x86_64-linux-gnu/libicui18n.so.67 /usr/lib/x86_64-linux-gnu/
COPY --from=OpenROAD /usr/lib/x86_64-linux-gnu/libicuuc.so.67 /usr/lib/x86_64-linux-gnu/
COPY --from=OpenROAD /usr/lib/x86_64-linux-gnu/libpcre2-16.so.0 /usr/lib/x86_64-linux-gnu/
COPY --from=OpenROAD /usr/lib/x86_64-linux-gnu/libzstd.so.1 /usr/lib/x86_64-linux-gnu/
COPY --from=OpenROAD /usr/lib/x86_64-linux-gnu/libglib-2.0.so.0 /usr/lib/x86_64-linux-gnu/
COPY --from=OpenROAD /usr/lib/x86_64-linux-gnu/libGLdispatch.so.0 /usr/lib/x86_64-linux-gnu/
COPY --from=OpenROAD /usr/lib/x86_64-linux-gnu/libGLX.so.0 /usr/lib/x86_64-linux-gnu/
COPY --from=OpenROAD /usr/lib/x86_64-linux-gnu/libfreetype.so.6 /usr/lib/x86_64-linux-gnu/
COPY --from=OpenROAD /usr/lib/x86_64-linux-gnu/libgraphite2.so.3 /usr/lib/x86_64-linux-gnu/
COPY --from=OpenROAD /usr/lib/x86_64-linux-gnu/libicudata.so.67 /usr/lib/x86_64-linux-gnu/
COPY --from=OpenROAD /lib/x86_64-linux-gnu/libpcre.so.3 /lib/x86_64-linux-gnu/
COPY --from=OpenROAD /usr/lib/x86_64-linux-gnu/libX11.so.6 /usr/lib/x86_64-linux-gnu/
COPY --from=OpenROAD /usr/lib/x86_64-linux-gnu/libbrotlidec.so.1 /usr/lib/x86_64-linux-gnu/
COPY --from=OpenROAD /usr/lib/x86_64-linux-gnu/libxcb.so.1 /usr/lib/x86_64-linux-gnu/
COPY --from=OpenROAD /usr/lib/x86_64-linux-gnu/libbrotlicommon.so.1 /usr/lib/x86_64-linux-gnu/
COPY --from=OpenROAD /usr/lib/x86_64-linux-gnu/libXau.so.6 /usr/lib/x86_64-linux-gnu/
COPY --from=OpenROAD /usr/lib/x86_64-linux-gnu/libXdmcp.so.6 /usr/lib/x86_64-linux-gnu/
COPY --from=OpenROAD /usr/lib/x86_64-linux-gnu/libbsd.so.0 /usr/lib/x86_64-linux-gnu/
COPY --from=OpenROAD /usr/lib/x86_64-linux-gnu/libmd.so.0 /usr/lib/x86_64-linux-gnu/

# Set PATH
ENV PATH=/tools/gtkwave/${GTKWAVE_VERSION}/bin:/tools/verible/verible-${VERIBLE_VERSION}/bin:/tools/verilator/${VERILATOR_VERSION}/bin:/opt/conda/envs/core-v-mini-mcu/bin:/opt/conda/condabin:${RISCV}/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin

# Install minimal required packages
RUN apt-get update && DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
    ca-certificates \
    libglib2.0-0 \
    libcairo2 \
    libpango-1.0-0 \
    libgtk2.0-0 \
    libpangocairo-1.0-0 \
    libgdk-pixbuf2.0-0 \
    libtcl8.6 \
    libtk8.6 \
    qtbase5-dev \
    qtbase5-dev-tools \
    libqt5gui5 \
    libqt5core5a \
    libqt5widgets5 \
    libxcb-xinerama0 \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*


# Select workdir
WORKDIR /workspace/x-heep

# Set conda environment
RUN echo "conda init bash && echo 'conda activate core-v-mini-mcu' >> /root/.bashrc" > /tmp/setup_conda.sh && \
    bash /tmp/setup_conda.sh && \
    rm /tmp/setup_conda.sh

RUN echo "echo ' ' " >> /root/.bashrc
RUN echo "echo '  ' " >> /root/.bashrc
RUN echo "echo '  ' " >> /root/.bashrc
RUN echo "echo '   @@@@        @@@              @@@        @@@    @@@@@@@@@@@@@    @@@@@@@@@@@@@   @@@@@@@@@@     ' " >> /root/.bashrc
RUN echo "echo '   @@@@@     @@@@@              @@@        @@@    @@@@@@@@@@@@@@  @@@@@@@@@@@@@@   @@@@@@@@@@@@@  ' " >> /root/.bashrc
RUN echo "echo '     @@@@   @@@@@               @@@        @@@    @@@@            @@@@             @@@       @@@@ ' " >> /root/.bashrc
RUN echo "echo '      @@@@@@@@@                 @@@        @@@    @@@@            @@@@             @@@        @@@ ' " >> /root/.bashrc
RUN echo "echo '         @@@@@       @@@@@@@    @@@@@@@@@@@@@@    @@@@@@@@@@@@@   @@@@@@@@@@@@@    @@@       @@@@ ' " >> /root/.bashrc
RUN echo "echo '        @@@@@@      @@@@@@@@@   @@@@@@@@@@@@@@    @@@@@@@@@@@@@   @@@@@@@@@@@@@    @@@@@@@@@@@@@  ' " >> /root/.bashrc
RUN echo "echo '      @@@@@@@@@                 @@@        @@@    @@@@            @@@@             @@@@@@@@@@     ' " >> /root/.bashrc
RUN echo "echo '     @@@@   @@@@@               @@@        @@@    @@@@            @@@@             @@@            ' " >> /root/.bashrc
RUN echo "echo '   @@@@@      @@@@              @@@        @@@    @@@@@@@@@@@@@@  @@@@@@@@@@@@@@   @@@            ' " >> /root/.bashrc
RUN echo "echo '  @@@@         @@@@             @@@        @@@     @@@@@@@@@@@@    @@@@@@@@@@@@    @@@            ' " >> /root/.bashrc
RUN echo "echo '  ' " >> /root/.bashrc
RUN echo "echo '  ' " >> /root/.bashrc
RUN echo "echo ' ' " >> /root/.bashrc

ENTRYPOINT ["/bin/bash"]
